import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.PriorityQueue;
import java.util.Queue;

public class Main {
	static int N, cnt, tmp;
	static int[][] map;
	static boolean[][] visited;
	static int[] dy = {-1, 1, 0, 0}; // 상-하-좌-우 탐색 델타 배열
	static int[] dx = {0, 0, -1, 1};
	static class Node{
		int y, x;
		public Node(int y, int x){
			this.y = y;
			this.x = x;
		}
	}
	
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		N = Integer.parseInt(br.readLine()); // 지도 행렬의 크기
		
		map = new int[N][N];
		visited = new boolean[N][N];
		
		for (int i = 0; i < N; i++) {
			String str = br.readLine();
			for (int j = 0; j < N; j++) {
				map[i][j] = str.charAt(j) - '0';
			}
		}
		PriorityQueue<Integer> nq = new PriorityQueue<>(); 
        // 우선순위큐를 통해 문제에서 요구한 단지의 수를 오름차순으로 정렬
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) { // bfs 탐색을 통해 연결된 집을 탐색함
				if(visited[i][j] || map[i][j] == 0) continue;
				tmp = 0;
				visited[i][j] = true;
				tmp++;
				bfs(i,j); 
				cnt++;
				nq.offer(tmp);
			}
		}
		System.out.println(cnt);
		for (int i = 0; i < cnt; i++) { // 정렬된 단지 수를 순차적으로 출력
			System.out.println(nq.poll());
		}
		
	}
	
	static void bfs(int y, int x) {
		Queue<Node> queue = new ArrayDeque<>();
		queue.offer(new Node(y, x));
		
		while(!queue.isEmpty()) {
			Node node = queue.poll();
			y = node.y;
			x = node.x;
			
			for (int i = 0; i < 4; i++) {
				int ny = y + dy[i];
				int nx = x + dx[i];
				
				if(ny < 0|| nx < 0 || ny >= N || nx >= N || map[ny][nx] == 0 || visited[ny][nx]) continue;
				queue.offer(new Node(ny, nx));
				visited[ny][nx] = true;
				tmp++;
				
			}
			
			
		}
		
		
	}

}
